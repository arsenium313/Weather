//
//  CityChooserVC.swift
//  Weather
//
//  Created by –ê—Ä—Å–µ–Ω–∏–π –ö—É—Ö–∞—Ä–µ–≤ on 06.07.2023.
//

import UIKit

class CityChooserVC: UITableViewController {

    //MARK: Properties
    public var searchController: UISearchController!
    public var geoResponces: [GeoResponce]
    /// –ü—Ä–∏—Ö–æ–¥–∏—Ç —Å PageVC –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
    public var weatherResponceTuples: [(OpenWeatherResponce, OpenWeatherAirPollutionResponce)]?
    
    private var resultsTableVC: ResultsTableVC?
    private let networkManager = NetworkManager()
    private var searchWorkItem: DispatchWorkItem?
    private var cells: [SuggestionCitiesCell] = []
    private let notificationCenter = NotificationCenter.default
    
    
    //MARK: - Init
    init(geoResponces: [GeoResponce]) {
        self.geoResponces = geoResponces
        super.init(nibName: nil, bundle: nil)
        print("CityChooserVC init üßê")
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    deinit {
        print("CityChooserVC deinit üßê")
    }
    
    
    //MARK: - View Life Circle
    override func viewDidLoad() {
        super.viewDidLoad()
        print("CityChoser View Did Load üßê")
        setupUI()
    }
    
    /// –ò–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ–Ω–æ–≤ WeatherVC –∏ CityChoserVC –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ navigationBar
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.black]
        navigationController?.navigationBar.tintColor = #colorLiteral(red: 0.1764705926, green: 0.4980392158, blue: 0.7568627596, alpha: 1)
    }
    

    //MARK: - SetupUI
    private func setupUI() {
        configureSelf()
        configureSearchController()
    }
    
    private func configureSelf() {
        self.view.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
        self.navigationItem.title = "Choose city" // –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ü–æ–≥–æ–¥–∞ –∫–∞–∫ –≤ —ç–ø–ª –ø–æ–≥–æ–¥–µ
        tableView.register(SuggestionCitiesCell.self, forCellReuseIdentifier: SuggestionCitiesCell.identifier)
        navigationItem.rightBarButtonItem = editBarButtonItem
        
    }
    
    private func configureSearchController() {
        resultsTableVC = ResultsTableVC()
        resultsTableVC?.parentCityChooserVC = self
        searchController = UISearchController(searchResultsController: resultsTableVC)
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        searchController.searchBar.tintColor = #colorLiteral(red: 0, green: 0.46, blue: 0.89, alpha: 1)
        searchController.searchResultsUpdater = self
    }

    /// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ weatherResponceTuples –¥–∞–Ω–Ω—ã–º–∏, –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –≤ —è—á–µ–π–∫–∞—Ö –≥–æ—Ä–æ–¥–æ–≤
    public func updateWeatherResponces(responceTuples: [(OpenWeatherResponce, OpenWeatherAirPollutionResponce)]) {
        self.weatherResponceTuples = responceTuples
        self.tableView.reloadData()
    }
    
    
    // MARK: - UIBarButtonItem Creation and Configuration
    /// –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private var editBarButtonItem: UIBarButtonItem {
        let image = UIImage(systemName: "ellipsis.circle")
        return UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(barButtonItemClicked(_:)))
    }
   
    private func deleteRow(indexPath: IndexPath) {
        let cityToDelete = self.geoResponces[indexPath.row]
        let cityToDeleteCD = DataManager.shared.convertAndFetch(geo: cityToDelete)
        
        /// –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ CD –∏ self
        DataManager.shared.delete(cityToDeleteCD)
        self.weatherResponceTuples?.remove(at: indexPath.row)
        self.geoResponces.remove(at: indexPath.row)
        // —É–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
        cells.removeAll(where: { $0.geo.lat == cityToDelete.lat && $0.geo.lon == cityToDelete.lon })
        
        /// –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ PageVC
        if let pageVC = self.navigationController?.viewControllers[0] as? PageVC {
            pageVC.changePageControlPageAmount { $0.numberOfPages -= 1 }
            pageVC.pages.remove(at: indexPath.row)
            
            let index = pageVC.geoResponces.firstIndex(where: { $0.lat == cityToDelete.lat && $0.lon == cityToDelete.lon })
            if let index = index {
                pageVC.geoResponces.remove(at: index)
            }
        } else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ PageVC üò®")
        }
        
        self.tableView.reloadData()
    }
    
    // MARK: - @objc
    @objc
    private func barButtonItemClicked(_ sender: UIBarButtonItem) {
        print("barBitton clicked ‚òÆÔ∏è")
        if tableView.isEditing { // –µ—Å–ª–∏ –¥–µ–ª–∞–ª–æ—Å—å, —Ç–æ —É–±–∏—Ä–∞–µ—Ç
            print("set editing to false üà¥")
            // —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
            // –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–¥–µ—Ç –≤ —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ pagerVC
            
            print("cells.count == \(cells.count) üÖøÔ∏è")
            for cell in cells {
                guard let indexPath = tableView.indexPath(for: cell) else {
                    print("cells.count == \(cells.count) üî∂")
                    
                    tableView.setEditing(false, animated: true)
                    return
                }
                DataManager.shared.changeIndex(geo: cell.geo, newIndex: Int16(indexPath.row))
            }
    
            tableView.setEditing(false, animated: true)
            print("seted! editing to false üà¥")
        } else { // –µ—Å–ª–∏ –Ω–µ –¥–µ–ª–∞–ª–æ—Å—å —Ç–æ –¥–µ–ª–∞–µ—Ç
            print("set editing to true ‚ùáÔ∏è")
            tableView.setEditing(true, animated: true)
        }
    }
    
}


//MARK: - Table delegate / dataSource
extension CityChooserVC {
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return geoResponces.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: SuggestionCitiesCell.identifier, for: indexPath) as! SuggestionCitiesCell
        let geo = geoResponces[indexPath.row]
        
        cell.primaryText = geo.nameOfLocation ?? "nill"
        cell.geo = geo
        cells.append(cell)
        /// –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ CityChoserVC –¥–æ —Ç–æ–≥–æ –∫–∞–∫ —Å–∫–∞—á–∞–ª–∏ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—á–µ—Ä–∫–∏
        if let responce = weatherResponceTuples?[indexPath.row] {
            cell.secondaryText = "\(responce.0.tempAndPressure?.temp ?? -100). \(responce.0.weatherDescription?.first?.description ?? "nil")"
        } else {
            cell.secondaryText = "- -"
        }
      // –∫–æ–≥–¥–∞ –≥–æ—Ä–æ–¥–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ, —Ç–æ–≥–¥–∞ –æ—à–∏–±–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç - -
// –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –¥–µ–ª–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å–Ω–∏–º–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        cell.setupUI()
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let pageVC = navigationController?.viewControllers[0] as? PageVC else { return }
        let index = indexPath.row
            
        /// –û–±–Ω–æ–≤–ª—è–µ–º PageVC
        pageVC.setViewControllers([pageVC.pages[index]], direction: .forward, animated: false)
        pageVC.updatePageControlCurrentPage(to: index)
        
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isFirstToShow flag
        DataManager.shared.setIsFirstToShowFlag(geo: geoResponces[index])
        self.navigationController?.popToRootViewController(animated: true)
    }

    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        // –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Ç–æ–º –≤ –∫–Ω–æ–ø–∫—É
        let deleteAction = UIContextualAction(style: .destructive, title: "Delete")
        { action, view, completionHandler in
            self.deleteRow(indexPath: indexPath)
            completionHandler(true)
        }
        
        return UISwipeActionsConfiguration(actions: [deleteAction])
    }
    
    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        ///–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —è—á–µ–µ–∫
        print("Moved! ü•∂ from \(sourceIndexPath.row) to \(destinationIndexPath.row) ü´°")
    }
    
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è—á–µ–µ–∫
        deleteRow(indexPath: indexPath)
    }
    
}


//MARK: - Search Updater
extension CityChooserVC: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        searchWorkItem?.cancel()
        
        /// –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é
        let workItem = DispatchWorkItem {
            let cityName = searchController.searchBar.text
            self.networkManager.getCoordinateByCityName(cityName: cityName ?? "") { responces in
                DispatchQueue.main.async {
                    self.resultsTableVC?.geoResponces = responces
                    self.resultsTableVC?.tableView.reloadData()
                }
            }
        }
        
        searchWorkItem = workItem
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.25, execute: workItem)
    }
}
