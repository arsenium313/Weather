//
//  WeatherModalVC.swift
//  Weather
//
//  Created by –ê—Ä—Å–µ–Ω–∏–π –ö—É—Ö–∞—Ä–µ–≤ on 01.09.2023.
//

import UIKit

/// –°–æ–∑–¥–∞–µ—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤ ResultsTable –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ä—è–¥, deinit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç —Å —ç–∫—Ä–∞–Ω–∞
class WeatherModalVC: UIViewController {

    //MARK: Properties
    private let bundleView = BundleView()
    private let networkManager = NetworkManager()
    private let cityChoserVC: CityChooserVC // –Ω—É–∂–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤—ã
    private var geoResponceToSave: GeoResponce // —á—Ç–æ–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ UD –∏–ª–∏ CoreData
    private var weatherConditionTuple: (OpenWeatherResponce, OpenWeatherAirPollutionResponce)! // —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª–æ–º
    
    
    // MARK: - Init
    /**
     - Parameter geoResponce: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –ø–æ–≥–æ–¥—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
     - Parameter cityChoserVC : –ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω, –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–≥–æ —Ç–∞–±–ª–∏—Ü—ã (—ç–∫—Ä–∞–Ω –≤ —Å–≤–æ–µ–º Navigation stack)
     */
    init(geoResponce geo: GeoResponce, cityChoserVC: CityChooserVC) {
        print("WeatherModalVC Init üßê")
        self.geoResponceToSave = geo
        self.cityChoserVC = cityChoserVC
        super.init(nibName: nil, bundle: nil)
        
        networkManager.downloadWeatherCondition(for: geo) {
            self.bundleView.setupUI(forGeo: geo, using: $0.0, $0.1)
            self.weatherConditionTuple = $0
        }
    } 
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    deinit {
        print("WeatherModalVC deinit üßê")
    }
    
    
    //MARK: - View Life Circle
    override func loadView() {
        let view = GradientRootView()
        self.view = view
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    

    //MARK: - SetupUI
    private func setupUI() {
        configureBundleView()
        configureAddCityBarButton()
    }
    
    private func configureBundleView() {
        self.view.addSubview(bundleView)
        bundleView.translatesAutoresizingMaskIntoConstraints = false
        let guide = self.view.layoutMarginsGuide
        NSLayoutConstraint.activate([
            bundleView.topAnchor.constraint(equalTo: guide.topAnchor),
            bundleView.leadingAnchor.constraint(equalTo: guide.leadingAnchor),
            bundleView.trailingAnchor.constraint(equalTo: guide.trailingAnchor),
            bundleView.bottomAnchor.constraint(equalTo: guide.bottomAnchor)
        ])
    }
    
    private func configureAddCityBarButton() {
        navigationController?.navigationBar.titleTextAttributes =
        [NSAttributedString.Key.foregroundColor : UIColor.white]
        self.navigationItem.rightBarButtonItem = addBarButton
        addBarButton.tintColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
    }
        
    
    // MARK: - UIBarButtonItem Creation and Configuration
    private var addBarButton: UIBarButtonItem {
        let image = UIImage(systemName: "square.and.arrow.down")
        return UIBarButtonItem(image: image, style: .plain,
                                           target: self,
                               action: #selector(barButtonItemClicked(_:)))
    }

    
    // MARK: - @objc
    @objc
    private func barButtonItemClicked(_ sender: UIBarButtonItem) {
        print("barButtonItemClicked üßê")
        DataManager.shared.createGeoEntity(geo: geoResponceToSave)
        
        cityChoserVC.geoResponces.append(geoResponceToSave)
        cityChoserVC.weatherResponceTuples?.append(weatherConditionTuple)
        
        cityChoserVC.tableView.reloadData()
        cityChoserVC.searchController.isActive = false
        
        /// –°–æ–∑–¥–∞—ë–º WeatherHomeVC –∏ –∫–ª–∞–¥–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤ –≤ PageVC
        /// PageVC —ç—Ç–æ rootVC, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ–¥ 0 –∏–Ω–¥–µ–∫—Å–æ–º
        if let pageVC = cityChoserVC.navigationController?.viewControllers[0] as? PageVC {
            print("–£–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ PageVC üßê")
            let weatherHomeVC = WeatherHomeVC()

            weatherHomeVC.bundleView.setupUI(forGeo: geoResponceToSave,
                                             using: weatherConditionTuple.0, weatherConditionTuple.1)
            pageVC.pages.append(weatherHomeVC)
            pageVC.changePageControlPageAmount { $0.numberOfPages += 1 }
  
        } else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ PageVC üò®")
        }
        
        dismiss(animated: true)
    }
}
