//
//  SunAndArcTogether.swift
//  GradientTest
//
//  Created by –ê—Ä—Å–µ–Ω–∏–π –ö—É—Ö–∞—Ä–µ–≤ on 13.07.2023.
//

import UIKit

class SunAndArcView: UIView {

    //MARK: Properties
    var startTimeStamp: Int = 0
    var endTimeStamp: Int = 0
  
    let arcImage = UIImage(named: "arcImage")
    private lazy var arcView = UIImageView(image: arcImage) //ArcView()
    private let sunImage = UIImage(named: "sunImage")
    private let sunView =  SunView()//UIImageView
    private var radius: CGFloat = 0

    
    //MARK: - Init
    override init(frame: CGRect) {
      //  self.sunView = UIImageView(image: sunImage)
        super.init(frame: frame)
        self.addSubview(arcView)
        self.addSubview(sunView)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    
    // MARK: - SetupUI
    private func setupUI() {
        configureImageView()
    }
    private func configureImageView() {
        
    }
    
    //MARK: - Drawing
    override func draw(_ rect: CGRect) {
        print("sunAndArc üé®")
        self.radius = rect.width - rect.width / 2 < rect.height ? (rect.width / 2) * 0.95 : rect.height * 0.95 // –ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥—É–≥–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –≤—å—é
      //  arcView.radius = radius
        
        let sunSize = radius * 0.7 // –†–∞–∑–º–µ—Ä —Å–æ–ª–Ω—Ü–∞
        sunView.bounds.size = CGSize(width: sunSize, height: sunSize)
    
        let angle = findAngle(startTime: startTimeStamp, endTime: endTimeStamp)
        let center = configurePositionOfSunFor(angle)
        sunView.center = center

        arcView.frame = rect
    }

    
    //MARK: - Configure Position of the sun
    /**
        –†–∏—Å—É–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–ª–Ω—Ü–∞ –Ω–∞ –¥—É–≥–µ
        - Parameter angle: –£–≥–æ–ª –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥—É–≥–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–ª–Ω—Ü–µ
    */
    private func configurePositionOfSunFor(_ angle: Int) -> CGPoint {
        // sin() –∏ cos() –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö, –≤ –≥—Ä–∞–¥—É—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä—É—á–Ω—É—é
        let x = self.bounds.midX + radius * cos(CGFloat(angle) * (.pi / 180))
        let y = self.bounds.maxY - radius * sin(CGFloat(angle) * (.pi / 180))
        let center = CGPoint(x: x, y: y)
        return center
    }
    
    /// –ù–∞—Ö–æ–¥–∏–º –Ω–∞ –∫–∞–∫–æ–º —É–≥–ª–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥—É–≥–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–ª–Ω—Ü–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    private func findAngle(startTime: Int, endTime: Int) -> Int {
        let now = Date.now.timeIntervalSince1970
        let totalInDay = endTime - startTime
        guard totalInDay > 0 else { return 0 }
        let i = endTime - Int(now)
        let ratio = Double(i) / Double(totalInDay)
        let angle = 180 * ratio
        return Int(angle)
    }
    
}
