//
//  SunView.swift
//  GradientTest
//
//  Created by –ê—Ä—Å–µ–Ω–∏–π –ö—É—Ö–∞—Ä–µ–≤ on 12.07.2023.
//

import UIKit

class SunView: UIView {
      
  
    override init(frame: CGRect) {
        super.init(frame: frame)
        print("Sun Init ‚úÖ")
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    deinit {
        print("Sun deinit ‚ùå")
    }
    //MARK: - Drawing
    override func draw(_ rect: CGRect) {
        drawSun(rect)
    }
    
    ///–†–∏—Å—É–µ–º —Å–æ–ª–Ω—Ü–µ –∏  –µ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç
    func drawSun(_ rect: CGRect) {
        print("Sun üé®")
        let center = CGPoint(x: rect.midX, y: rect.midY)
        // –ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫—Ä—É–≥–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ–≥–æ –≤—å—é, —Å–ª–µ–¥–∏—Ç—å —á—Ç–æ–±—ã –≤–ª–µ–∑–ª–∏ —á–µ—Ä—Ç–æ—á–∫–∏:
        let radius = rect.width < rect.height ? center.x * 0.7 : center.y * 0.7
        
        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: 0, endAngle: 2 * .pi, clockwise: true)
        // —Ç.–∫ gradient layer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å–∫—É –¥—Ä—É–≥–æ–π layer, —Ç–æ —Å–æ–∑–¥–∞—ë–º layer —Ñ–æ—Ä–º—ã –∫—Ä—É–≥:
        let sunShapeLayer = CAShapeLayer()
        sunShapeLayer.path = path.cgPath
        
        let gradientLayer = CAGradientLayer()
        gradientLayer.frame = rect
        gradientLayer.colors = [#colorLiteral(red: 1, green: 0.7568627451, blue: 0, alpha: 1).cgColor, #colorLiteral(red: 1, green: 0.5568627451, blue: 0, alpha: 1).cgColor]
        gradientLayer.locations = [0, 1]
        // –û–±—Ä–µ–∑–∞–µ–º —Å–ª–æ–π —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –ø–æ —Ñ–æ—Ä–º–µ –∫—Ä—É–≥–∞:
        gradientLayer.mask = sunShapeLayer
        
        self.layer.addSublayer(gradientLayer)
        drawSunDashes(rect, radius: radius)
    }
    
    /// –†–∏—Å—É–µ–º —á—ë—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å–æ–ª–Ω—Ü–∞
    func drawSunDashes(_ rect: CGRect, radius: CGFloat) {
        print("sunDashes üé®")
        let dashesCount = 9
        let angle = CGFloat(Double.pi * 2) / CGFloat(dashesCount)
        
        let dashLayer = CALayer()
        dashLayer.backgroundColor = #colorLiteral(red: 1, green: 0.7568627451, blue: 0, alpha: 1)
        dashLayer.cornerRadius = 1.5
        
        let height = radius / 4 // —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–Ω–∏—è
        let width = height * 0.35 // —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º —Ç–æ–Ω—å—à–µ –ª–∏–Ω–∏—è
        let yOffset = radius + radius / 3 // —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –¥–∞–ª—å—à–µ –æ—Ç –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å–æ–ª–Ω—Ü–∞
        dashLayer.frame = CGRect(x: rect.midX - width / 2, y: rect.midY - yOffset, width: width, height: height)
        
        // –°–ª–æ–π –∫–æ—Ç–æ—Ä—ã–π –¥—É–±–ª–∏—Ä—É–µ—Ç –¥—Ä—É–≥–æ–π —Å–ª–æ–π
        let replicatorLayer = CAReplicatorLayer()
        replicatorLayer.instanceCount = dashesCount
        replicatorLayer.instanceTransform = CATransform3DMakeRotation(angle, 0, 0, 1)
        replicatorLayer.addSublayer(dashLayer)
        replicatorLayer.frame = rect
        
        self.layer.addSublayer(replicatorLayer)
    }
    
}
