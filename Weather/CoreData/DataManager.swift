//
//  DataManager.swift
//  Weather
//
//  Created by –ê—Ä—Å–µ–Ω–∏–π –ö—É—Ö–∞—Ä–µ–≤ on 02.09.2023.
//

import Foundation
import CoreData

class DataManager {
    
    static let shared = DataManager()
    
    private lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "GeoModel")
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        })
        return container
    }()
    
    func saveContext () {
        let context = persistentContainer.viewContext
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }

    /**
     –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ CD
     - Important: –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º UI –æ–±—ä–µ–∫—Ç–∞, –µ–≥–æ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CD –æ–±—ä–µ–∫—Ç
     */
    func delete<T>(_ object: T) {
        let context = persistentContainer.viewContext
        guard let object = object as? NSManagedObject else {return}
   
        context.delete(object)
        saveContext()
    }
    
    
    //MARK: - Create Entity
    /// –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç  CD –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É GeoResponce –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
    func createGeoEntity(geo: GeoResponce) {
        let entity = GeoResponceCD(context: persistentContainer.viewContext)
        entity.nameOfLocation = geo.nameOfLocation
        entity.state = geo.state
        entity.lon = geo.lon
        entity.lat = geo.lat
        entity.country = geo.country
        saveContext()
    }
    
    
    // MARK: - Fetch Entity
    /**
     –î–æ—Å—Ç–∞—ë—Ç –∏–∑ CD –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ UI –æ–±—ä–µ–∫—Ç—ã
     - Returns: –ú–∞—Å—Å–∏–≤ GeoResponce
     */
    func fetchSavedCities() -> [GeoResponce] {
        let request: NSFetchRequest<GeoResponceCD> = GeoResponceCD.fetchRequest()
        var entities: [GeoResponceCD] = []
        
        do {
           try entities = persistentContainer.viewContext.fetch(request)
        } catch let error {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å fetch from CD üò¢ \n \(error)")
        }
        
        let geoResponces: [GeoResponce] = geoConverter(geoEntities: entities)
        return geoResponces
    }
    
    
    func fetch(_ completionHandler: ([GeoResponce]) -> Void) {
        let request: NSFetchRequest<GeoResponceCD> = GeoResponceCD.fetchRequest()
        var entities: [GeoResponceCD] = []
        
        do {
           try entities = persistentContainer.viewContext.fetch(request)
        } catch let error {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å fetch from CD üò¢ \n \(error)")
        }
        
        let geoResponces: [GeoResponce] = geoConverter(geoEntities: entities)
        completionHandler(geoResponces)
    }
    
    
    /**
     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CD –æ–±—ä–µ–∫—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ GeoResponce
     - Parameter geo: –û–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ CD
     - Returns: CD –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
     - Note: —Ç.–∫. UI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–¥–µ–ª—è–º–∏ –∏–∑ CD, —Ç–æ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ UI –≤ CD
     */
    func convertAndFetch(geo: GeoResponce) -> GeoResponceCD {
        let request: NSFetchRequest<GeoResponceCD> = GeoResponceCD.fetchRequest()
        let predicate = NSCompoundPredicate(type: .and, subpredicates: [
            NSPredicate(format: "lat == %@", NSNumber(floatLiteral: geo.lat)),
            NSPredicate(format: "lon == %@", NSNumber(floatLiteral: geo.lon))
        ])
        request.predicate = predicate
        
        var entities: [GeoResponceCD] = []
        do {
            entities = try persistentContainer.viewContext.fetch(request)
        } catch let error {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å fetch from CD üò¢ \n \(error)")
        }
        
        return entities.first!
    }
    
 
    
    // –ò–Ω–¥–µ–∫—Å —Å–¥–µ–ª–∞—Ç—å –æ—Ç —Ç–∞–±–ª–∏—Ü—ã! tableview.row –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
    
    
    // MARK: - Work with isFirstToShow Flag
    /// –£–¥–∞–ª—è–µ—Ç —Ñ–ª–∞–≥ –≤ —Å–æ—Ö—Ä–∞–Ω–∞–Ω–Ω—ë–Ω—ã–π –æ–±—ä–µ–∫—Ç–∞—Ö
    public func removeIsFirstToShowFlag() {
        let entities = fetchIsFirstToShowArray()
        entities.forEach { $0.isFirstToShow = false }
        saveContext()
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ GeoResponce
    public func setIsFirstToShowFlag(geo: GeoResponce) {
        let entity = convertAndFetch(geo: geo)
        entity.isFirstToShow = true
        saveContext()
    }
    
    /**
     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç GeoResponce –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞
     - Returns: –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥ —Å —Ñ–ª–∞–≥–æ–º, –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ.
     –ï—Å–ª–∏ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏ —É–¥–∞–ª–∏–ª–∏ –µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–≤ –¥—Ä—É–≥–æ–π), —Ç–æ –≤–µ—Ä–Ω–µ—Ç –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö
     */
    public func fetchFirstToShow() -> GeoResponce {
        let entities = fetchIsFirstToShowArray()
        let geoArray = geoConverter(geoEntities: entities)
     
        // –ù–∞—à–ª–∏ –≥–æ—Ä–æ–¥ —Å —Ñ–ª–∞–≥–æ–º
        if let geo = geoArray.first {
            return geo
            
            // –ù–µ –Ω–∞—à–ª–∏ –≥–æ—Ä–æ–¥ —Å —Ñ–ª–∞–≥–æ–º
        } else {
            let geo = fetchSavedCities()
            return geo.first!
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ CD —Å —Ñ–ª–∞–≥–æ–º isFirstToShow
    private func fetchIsFirstToShowArray() -> [GeoResponceCD] {
        let request: NSFetchRequest<GeoResponceCD> = GeoResponceCD.fetchRequest()
        let predicate = NSPredicate(format: "isFirstToShow == true")
        request.predicate = predicate
        
        var entities: [GeoResponceCD] = []
        do {
            entities = try persistentContainer.viewContext.fetch(request)
        } catch let error {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å fetch from CD üò¢ \n \(error)")
        }
        return entities
    }
    
    
    // MARK: - Converter
    /**
     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ GeoResponce –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ CD
     - Parameter geoEntities: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ CD –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
     - Returns: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ GeoResponce
     - Note: —Ç.–∫. UI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–¥–µ–ª—è–º–∏ –∏–∑ CD, —Ç–æ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ CD –≤ UI
     */
    private func geoConverter(geoEntities: [GeoResponceCD]) -> [GeoResponce] {
        var geoResponces: [GeoResponce] = []
        
        for entity in geoEntities {
            let geo = GeoResponce(nameOfLocation: entity.nameOfLocation,
                                  localizedNames: nil,
                                  lat: entity.lat, lon: entity.lon,
                                  country: entity.country,
                                  state: entity.state)
            geoResponces.append(geo)
        }
        return geoResponces
    }
    
    
}
